class Solution {
public:
    void solve(vector<vector<char>>& board) {
        if(board.size()==0||board[0].size()==0)return;

        int m = board.size();
        int n = board[0].size();
        for(int i=0; i<n; i++){
            if(board[0][i]=='O'){
                dfs(board, 0, i, m,n);
            }
            if(board[m-1][i]=='O'){
                dfs(board, m-1, i, m,n);
            }
        }
        
        for(int i=1; i<m; i++){
            if(board[i][0]=='O'){
                dfs(board, i, 0,m,n);
            }
            if(board[i][n-1]=='O'){
                dfs(board, i, n-1,m,n);
            }
        }
        
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                 if(board[i][j]!='1') board[i][j] = 'X';
                 if(board[i][j]=='1') board[i][j] = 'O';
               
            }
        }
    }
    bool check(vector<vector<char>>& board, int i, int j, int m, int n){
        if(i>=0 and i<m and j>=0 and j<n){
            return true;
        }
        return false;
    }
    
    void dfs(vector<vector<char>>& board, int i, int j, int m ,int n){
        if(!check(board,i,j,m,n)) return;
        if(board[i][j]!='O') return;
        board[i][j] = '1';
        int dx[] = {-1,0,1,0};
        int dy[] = {0,1,0,-1};
        for(int idx=0; idx<4; idx++){
            int new_idx = i + dx[idx];
            int new_idy = j + dy[idx];
            dfs(board, new_idx, new_idy,m,n);
        }
    }
    
};