/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<double> averageOfLevels(TreeNode* root) {
        TreeNode* p, *t;
        double avg=0;
        p=root;
        queue<TreeNode*> q;
        vector<double> x;
        x.push_back(p->val);
        q.push(p);
        while(!q.empty())
        {
            
            t=q.front();
            q.pop();
      
             if(t->left!=NULL && t->right==NULL)
            {
                avg=double(t->left->val);
                x.push_back(avg);
                q.push(t->left);
          //  q.push(t->right);
            }
            else if(t->left==NULL && t->right!=NULL)
            {
              avg=double(t->right->val);
                x.push_back(avg); 
               // q.push(t->left);
                q.push(t->right);
            }
            
          else if(t->left!=NULL && t->right!=NULL)
          {
              if(t->left->val==0 || t->right->val==0)
              {
                if(t->left->val==0 )
                {
                 avg=double(t->right->val)/2;
                x.push_back(avg);
                q.push(t->left);
                    q.push(t->right);
                }
                if( t->right->val==0)
                {
                    avg=double(t->left->val)/2;
                x.push_back(avg);
                q.push(t->left);
                    q.push(t->right);
                }
              }
              else{
              
            avg=(double(t->left->val)+ double(t->right->val))/2;
             // cout<<avg<<'\t';
              x.push_back(avg);
            q.push(t->left);
            q.push(t->right);
              }
          }
            else
            {
                t++;
                //cout<<t->val;
            }
           
             

        }
        
        return x;
    }
};