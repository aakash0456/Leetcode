class Solution {
public:
    int dp[300][300];
    int minPathSum(vector<vector<int>>& grid) {
        memset(dp, -1, sizeof(dp));
        int m = grid.size();
        int n = grid[0].size();
        
        return func(grid, 0, 0);
        
    }
    
    int func(vector<vector<int>>& grid, int i ,int j){
        if(dp[i][j]!=-1) return dp[i][j];
        
        if(i==grid.size()-1 and j==grid[0].size()-1){
            return grid[i][j];
        }
        if(i>=grid.size() or j>=grid[0].size()){
            return 2147483600;
        }
        
        int right = grid[i][j] + func(grid, i, j+1) + 0LL;
        int down = grid[i][j] + func(grid, i+1, j) + 0LL;
        
        return dp[i][j] = min(right, down);
        
        
    }
};