class Solution {
public:
    vector<vector<int>> findFarmland(vector<vector<int>>& land) {
        int m = land.size();
        int n = land[0].size();
        
        vector<vector<int>> ans;
       vector<pair<int, int>> q;
        for(int i=0; i<m; i++){
            vector<int> temp;
            for(int j=0; j<n; j++){
                if(land[i][j]==1){
                pair<int, int>  p= dfs(land,i,j);
                     vector<int> res;
                res.push_back(i);
                res.push_back(j);
                res.push_back(p.first);
                res.push_back(p.second);
                ans.push_back(res);
                }
               
            }
        }
        // for(auto s : q){
        //     cout<<s.first<<" "<<s.second<<endl;
        // }
        
       return ans;
    }
    
    bool check(vector<vector<int>>& land, int i, int j){
        if(i>=0 and i<land.size() and j>=0 and j<land[0].size()){
            return true;
        }
        
        return false;
    } 
    
      pair<int, int> dfs(vector<vector<int>>& land, int i, int j){
        if(!check(land,i,j)) return {-1,-1};
        if(land[i][j]==0 or land[i][j]==2) return {-1,-1};
        land[i][j] =2;
        pair<int, int> res  = make_pair(i, j);
        int dx[] = {-1,0,1,0};
        int dy[] = {0,1,0,-1};
        for(int k=0; k<4; k++){
            int new_x = i+ dx[k];
            int new_y = j+ dy[k];
            
            pair<int, int> ans = dfs(land, new_x, new_y);
            res.first = max(res.first, ans.first);
            res.second = max(res.second, ans.second);
    }
        
        return res;
    }      
};