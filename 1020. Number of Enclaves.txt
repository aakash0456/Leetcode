class Solution {
public:
    int numEnclaves(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> vis(m, vector<int>(n, 0));
        vector<vector<int>> mat;
        mat = grid;
        for(int i=0; i<m; i++){
            for(int j=0;j<n; j++){
                if(i==0 or i==m-1 or j==0 or j==n-1){
                    if(grid[i][j]==1){
                        dfs(grid, vis, i, j);
                    }
                }
            }
        }
        int move = 0;
        for(auto row : grid){
            for(auto no: row){
                if(no==1) move++;
            }
        }
        return move;
    }
     bool check(vector<vector<int>>& grid, int i, int j){
        if(i>=0 and i<grid.size() and j>=0 and j<grid[0].size()) return true;
        return false;
    }
    void dfs(vector<vector<int>>& grid, vector<vector<int>>& vis, int i, int j){
        if(!check(grid, i, j)) return;
        if(vis[i][j]==1) return;
        if(grid[i][j]==0) return;
        grid[i][j] = 0;
        vis[i][j] = 1;
        vis[i][j] = 1;
        int dx[] = {-1, 0, 1, 0};
        int dy[] = {0, 1, 0, -1};
        for(int idx = 0; idx<4; idx++){
            int new_idx = i+dx[idx];
            int new_idy = j+dy[idx];
            
            dfs(grid,vis, new_idx, new_idy);
        }
    }
};