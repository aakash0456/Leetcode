class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        int no = 0;
        int m = grid.size();
        int n = grid[0].size();
        
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(grid[i][j]=='1'){
                    no++;
                    //dfs(grid, i,j);
                    bfs(grid, i, j);
                }
            }
        }
        return no;
    }
    bool check(vector<vector<char>>& grid, int i, int j){
        if(i>=0 and i<grid.size() and j>=0 and j<grid[0].size()) return true;
        return false;
    }
    
    
    void dfs(vector<vector<char>>& grid, int i, int j){
        if(!check(grid, i, j)) return;
        if(grid[i][j]=='0') return;
        grid[i][j] = '0';
        int dx[] = {-1, 0, 1, 0};
        int dy[] = {0, 1, 0, -1};
        for(int idx = 0; idx<4; idx++){
            int new_idx = i+dx[idx];
            int new_idy = j+dy[idx];
            
            dfs(grid, new_idx, new_idy);
        }
        
        return;
    }
    
    void bfs(vector<vector<char>>& grid, int i, int j){
        queue<pair<int, int>> q;
        q.push({i, j});
        while(!q.empty()){
            int i = q.front().first;
            int j = q.front().second;
            q.pop();
            grid[i][j] = '0';
            int dx[] = {-1, 0, 1, 0};
            int dy[] = {0, 1, 0, -1};
            for(int idx = 0; idx<4; idx++){
                int new_idx = i+dx[idx];
                int new_idy = j+dy[idx];
                if(check(grid, new_idx, new_idy) and grid[new_idx][new_idy]=='1'){
                    grid[new_idx][new_idy] = '0';
                    q.push({new_idx, new_idy});
                }

            }
        }
    }
    
};