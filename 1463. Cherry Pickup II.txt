class Solution {
public:
    int cherryPickup(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<vector<int>>> dp(m, vector<vector<int>>(n, vector<int>(n, -1)));
        int ans = func(grid, 0, 0, n-1, m, n, dp);
        return ans;
    }
    bool check(int i, int j1, int j2, int m, int n){
        if(i>=0 and i<m and j1>=0 and j1<n and j2<n and j2 >=0) return true;
        return false;
    }

    int func(vector<vector<int>> &grid, int i, int j1, int j2, int m , int n, vector<vector<vector<int>>> &dp){
        if(!check(i, j1,j2, m, n)) return -1e8;
        if(i==m-1){
            if(j1==j2) return grid[i][j1];
            else return grid[i][j1] + grid[i][j2];
        }
        if(dp[i][j1][j2]!=-1) return dp[i][j1][j2];
        
        int maxno = -1e8;
        for(int dj1=-1; dj1<=1; dj1++){
            for(int dj2=-1;dj2<=1;dj2++){
               int val = 0;
                if(j1==j2) val = grid[i][j1];
                else val = grid[i][j1] + grid[i][j2];
                 val += func(grid, i+1, j1+dj1, j2+dj2, m,n, dp);
                 maxno = max(maxno, val);
            }
        }
     
       return dp[i][j1][j2] = maxno;
    }
};