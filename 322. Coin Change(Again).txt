class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        int n = coins.size();
        vector<vector<int>> dp(n+1, vector<int>(amount+1, -1));
        int ans =  func(coins, n-1, amount, dp);
        return ans>=1e9?-1:ans;
        
    }
int func(vector<int> &coins, int n, int amount,vector<vector<int>> &dp){
    //base
    if(n==0){
        if(coins[n]==amount) return 1;
        else if(amount%coins[n] ==0) return amount/coins[n];
        else return 1e9;

    }
    if(dp[n][amount]!=-1) return dp[n][amount];
    int notpick = func(coins, n-1, amount, dp);
    int pick = INT_MAX;
    if(coins[n] <= amount){
        pick  = 1 + func(coins, n, amount-coins[n], dp);
    }

    return dp[n][amount] = min(pick , notpick);
}
    
};