class Solution {
public:
    
    int minCost(vector<vector<int>>& costs) {
        int n = costs.size();
        int last = 3;
        vector<vector<int>> dp(n, vector<int>(4,-1));
        return func(costs, n-1, last, dp);
    }
    int func(vector<vector<int>> &costs, int n, int last, vector<vector<int>> &dp){
        //base
        //if(n == -1) return 0;
        if(n == 0){
            int maxno = INT_MAX;
            for(int i=0; i<=2; i++){
                if(i!=last){
                    maxno = min(maxno, costs[0][i]);
                }
            }
            return maxno;
        } 
        
        if(dp[n][last]!=-1) return dp[n][last];
        //recursive
        int maxno = INT_MAX;
        for(int i=0; i<costs[0].size(); i++){
            {
                if(i!=last){
                int maxn = costs[n][i] + func(costs, n-1, i, dp);
                maxno = min(maxno, maxn);
            }
            }
        }
        
        return dp[n][last] = maxno;
    }
};