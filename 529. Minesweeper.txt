class Solution {
public:
    vector<vector<char>> updateBoard(vector<vector<char>>& board, vector<int>& click) {
        if(board[click[0]][click[1]] == 'M'){
            board[click[0]][click[1]] = 'X';
            return board;
        }
        reveal(board,click[0],click[1]);
        return board;
    }
    
    bool inboard(const vector<vector<char>>& board, int x, int y){
        return ( x>=0 && x<board.size() && y>=0 && y<board[0].size() );
    }
    
    void reveal(vector<vector<char>>& board, int x, int y){
        if(!inboard(board,x,y)) return;
        if(board[x][y] == 'E'){
            //search 8 adjacent squares
            int count = 0;
			int dx[] = {-1, -1, -1, 0, 0, 1,1,1};
             int dy[] = {-1, 0, 1, -1, 1, -1, 0, 1};
             for(int idx=0; idx<8; idx++){
                 int new_idx = x + dx[idx];
                 int new_idy = y + dy[idx];
                 
                 if(inboard(board,new_idx, new_idy) and board[new_idx][new_idy]=='M') count++;
             }

            if(count>0)
                board[x][y] = '0'+count;
            else{
                board[x][y] = 'B';
				int dx[] = {-1, -1, -1, 0, 0, 1,1,1};
             int dy[] = {-1, 0, 1, -1, 1, -1, 0, 1};
             for(int idx=0; idx<8; idx++){
                 int new_idx = x + dx[idx];
                 int new_idy = y + dy[idx];
                 
                 reveal(board,new_idx, new_idy);
             }
            }
        }
    }
};