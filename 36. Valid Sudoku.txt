class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        int m = board.size();
        int n = board[0].size();
        
        // for row
        
        for(int i=0; i<m; i++)
        {
            unordered_map<char, int> x;
            for(int j=0; j<n; j++)
            {
                if(board[i][j]!='.')
                {
                    x[board[i][j]]++;
                    if(x[board[i][j]]>1)
                    {
                        cout<<board[i][j]<<" ";
                        cout<<"xx";
                        return false;
                    }
                }
            }
        }
        
        //forcoloumn
       
        for(int i=0; i<m; i++)
        {
             unordered_map<char, int> y;
            for(int j=0; j<n; j++)
            {
                if(board[j][i]!='.')
                {
                    y[board[j][i]]++;
                    if(y[board[j][i]]>1)
                    {
                        return false;
                    }
                }
            }
        }
        
        
        //for box
        return box(board,0,0) and box(board,0,3) and box(board,0,6) and box(board,3,0) and box(board,3,3) and box(board,3,6) and box(board,6,0) and box(board,6,3) and box(board,6,6);
    
    }
    
    bool box(vector<vector<char>>& board, int m, int n)
    {
        unordered_map<char, int> z;
        for(int i=m; i<m+3; i++)
        {
            
            for(int j=n; j<n+3; j++)
            {
                if(board[i][j]!='.')
                {
                    cout<<board[i][j]<<" ";
                    z[board[i][j]]++;
                    if(z[board[i][j]]>1)
                    {                   
                        cout<<"ssss";
                        return false;
                    }
                }
            }
        }
        
        return true;
    }
    
};