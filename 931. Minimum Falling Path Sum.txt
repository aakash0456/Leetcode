class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int m = matrix.size();
        int n = matrix[0].size();
        int res = INT_MAX;
        for(int j=0; j<n; j++){
            vector<vector<int>> dp(m, vector<int>(n,-1));
        int ans = func(matrix, 0, j, m , n, dp);
        res = min(res, ans);
        }
        
        return res;
    }
    bool check(int i, int j, int m, int n){
        if(i>=0 and i<m and j>=0 and j<n) return true;
        return false;
    }
    int func(vector<vector<int>> &matrix, int i, int j, int m, int n,  vector<vector<int>> &dp){
        if(!check(i, j, m, n)) return 1e9;
        if(i==n-1) return matrix[i][j];
        if(dp[i][j]!=-1) return dp[i][j];
        int dialeft = matrix[i][j] + func(matrix, i+1, j-1, m ,n, dp);
        int down = matrix[i][j] + func(matrix, i+1, j, m ,n, dp);
        int diaright =  matrix[i][j] + func(matrix, i+1, j+1, m ,n, dp);

        int minno = min(down ,  min(dialeft, diaright));

        return dp[i][j] = minno;

    }
};