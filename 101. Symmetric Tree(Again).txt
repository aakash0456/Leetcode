/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if(!root) return true;
        vector<int> l, r;
        l.push_back(root->val);
        r.push_back(root->val);
        funcL(root->left, l);
        funcR(root->right, r); 
        for(auto no : l){
            cout<<no<<" ";
        }
        cout<<endl;
        for(auto no : r){
            cout<<no<<" ";
        }
        
        return l==r;
    }
    void funcL(TreeNode* root, vector<int> &l){
        if(!root) {
            l.push_back(0);
            return;
        }
        
        l.push_back(root->val);
        funcL(root->right,l);
        funcL(root->left, l);
        
        return;
    }
    void funcR(TreeNode* root, vector<int> &r){
        if(!root) {
             r.push_back(0);
            return;
        }
        
        r.push_back(root->val);
        funcR(root->left, r);
        funcR(root->right, r);
        
        return;
    }
};