class node
{
    public:
    int x;
    int y;
    node(int x, int y)
    {
        this->x = x;
        this->y = y;
    }
};
class Solution {
public:
    
    int area1(vector<vector<int>>& grid, int i, int j, int m ,int n)
    {
        queue<node> q;
        q.push(node(i,j));
        int count=1;
        while(!q.empty())
       {

           int x = q.front().x;
           int y = q.front().y;
           q.pop();
           grid[x][y] = 0;
           int dx[] = {-1, 0, 1, 0};
           int dy[] = {0, 1, 0, -1};
          
           for(int idx = 0; idx<4; idx++)
           {

               int new_x = x + dx[idx];
               int new_y = y + dy[idx];

               if(new_x>=0 and new_x<m and new_y>=0 and new_y<n and grid[new_x][new_y]==1)
               {
                   grid[new_x][new_y] = 0;
                   q.push(node(new_x,new_y));
                   count++;
               }
           }
       }
        
        return count;
   
    }

    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
         
        
        int area = 0;
         for(int i=0; i<m; i++)
         {
             for(int j=0; j<n; j++)
             {
                 if(grid[i][j]==1)
                 {
                     area = max(area, area1(grid, i, j, m, n));
                  
                 }
             }
         }
 
   
        
        return area;        
    }
};