//{ Driver Code Starts
// Initial Template for C++
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function Template for C++

class Solution {
  public:
    int countDistinctIslands(vector<vector<int>>& grid) {
        // code here
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> vis(m, vector<int>(n, 0));
        set<vector<pair<int, int>>> s; 
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(!vis[i][j] and grid[i][j]==1){
                    vector<pair<int, int>> vec;
                    //vis[i][j] = 1;
                    dfs(grid, vis, i, j, i ,j, vec);
                    s.insert(vec);
                }
            }
        }
        return s.size();
    }
     bool check(vector<vector<int>>& grid, int i, int j){
        if(i>=0 and i<grid.size() and j>=0 and j<grid[0].size()) return true;
        return false;
    }
    
    void dfs(vector<vector<int>>& grid, vector<vector<int>>& vis, int br, int bc, int i, int j, vector<pair<int, int>> &vec){
        if(!check(grid, i, j)) return;
        if(vis[i][j] or grid[i][j]==0) return;
        vis[i][j] = 1;
        vec.push_back({i-br, j-bc});
        int dx[] = {-1, 0, 1, 0};
        int dy[] = {0, 1, 0, -1};
        for(int idx = 0; idx<4; idx++){
            int new_idx = i+dx[idx];
            int new_idy = j+dy[idx];
            
            dfs(grid,vis,br, bc, new_idx, new_idy, vec);
        }
        
        return;
    }
    
};


//{ Driver Code Starts.

int main() {

    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n >> m;
        vector<vector<int>> grid(n, vector<int>(m));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                cin >> grid[i][j];
            }
        }
        Solution obj;
        cout << obj.countDistinctIslands(grid) << endl;
    }
}
// } Driver Code Ends