/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool hasPathSum(TreeNode* root, int targetSum) {
        int sum=0;
        return func(root, targetSum, sum);
    }
    bool func(TreeNode* root, int targetSum, int sum){
        if(!root) return false;
       // cout << "Inside: " << root->val << " with sum= " << sum << endl;
        if((!root->left and !root->right) and sum+root->val == targetSum) return true;
        bool l = func(root->left, targetSum, sum+root->val);
        bool r = func(root->right, targetSum, sum+root->val);
        
       // cout << "Values: l=" << l << " r= " << r << " at " << root->val << endl;
        return l or r;
        
    }
};