class Solution {
public:
    bool vis[1000000];
    bool validPath(int n, vector<vector<int>>& edges, int source, int destination) {
        if(edges.size()==0)
        {
            return true;;
        }
        
        int m = edges.size();
        int k = edges[0].size();
        int u,v;
        vector<vector<int>> adjList(n);
        for(int i=0; i<edges.size(); i++)
        {
            u = edges[i][0];
            v = edges[i][1];
            
            adjList[u].push_back(v);
            adjList[v].push_back(u);
        }
        bool ans = false; 
        // for(int i=0; i<m; i++)
        // {
            ans = dfs(adjList, source, source, destination, ans);
            
       // }
        
        return ans;
    }
    
    bool dfs( vector<vector<int>>& edges, int i, int source, int destination, bool ans)
    {
        vis[i] = true;
      
        for(auto edge : edges[i])
        {
            if(edge == destination)
            {
               // cout<<"ss";
                return true;
            }
            if(!vis[edge])
            {
                ans |= dfs(edges, edge, source, destination, ans);
            }
        }
        
        return ans;
    }
    
};